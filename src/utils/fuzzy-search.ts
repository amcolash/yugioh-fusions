// generated by gemini

import levenshtein from "js-levenshtein";

/**
 * Finds the minimum Levenshtein distance between a search term and any substring
 * of the target string.
 */
function getMinSubstringDistance(searchTerm: string, target: string): number {
  const searchTermLen = searchTerm.length;
  const targetLen = target.length;

  if (targetLen < searchTermLen) {
    return levenshtein(searchTerm, target);
  }

  let minDistance = Infinity;

  // Slide a window of the search term's length across the target string
  for (let i = 0; i <= targetLen - searchTermLen; i++) {
    const substring = target.substring(i, i + searchTermLen);
    const distance = levenshtein(searchTerm, substring);

    // If we find a perfect match, we can exit early
    if (distance === 0) {
      return 0;
    }

    if (distance < minDistance) {
      minDistance = distance;
    }
  }

  return minDistance;
}

/**
 * Filters a list of strings to find items that have a substring
 * that fuzzy-matches the search term.
 *
 * @param searchTerm The string to search for.
 * @param list The array of strings to search within.
 * @param maxDistanceRatio The maximum allowed distance ratio. A lower number is stricter.
 * The actual max distance is calculated as: `Math.floor(searchTerm.length * maxDistanceRatio)`
 * @returns A new array containing the matching items.
 */
export function fuzzySubstringMatch(searchTerm: string, list: string[], maxDistanceRatio: number = 0.4): string[] {
  if (!searchTerm) {
    return []; // Return empty if there's no search term
  }

  const normalizedSearchTerm = searchTerm.toLowerCase();
  const searchTermLen = normalizedSearchTerm.length;

  // Determine the maximum allowed distance. For a 5-letter word and a ratio
  // of 0.4, the max distance is 2 (5 * 0.4).
  const maxDistance = Math.floor(searchTermLen * maxDistanceRatio);

  const matches: string[] = [];

  for (const item of list) {
    const normalizedItem = item.toLowerCase();

    // Find the best possible substring match and get its distance
    const distance = getMinSubstringDistance(normalizedSearchTerm, normalizedItem);

    if (distance <= maxDistance) {
      // Add the original, non-normalized item to the results
      matches.push(item);
    }
  }

  return matches;
}
